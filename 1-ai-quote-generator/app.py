from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import os

app = Flask(__name__)
CORS(app)  # Enable CORS for frontend communication

# üîê PLACE YOUR GEMINI API KEY HERE
# DO NOT expose your real API key in public repositories.
# Use an environment variable or replace below with your actual key for local testing.
GEMINI_API_KEY = "YOUR_GEMINI_API_KEY_HERE"

if not GEMINI_API_KEY:
    print("‚ö†Ô∏è WARNING: GEMINI_API_KEY is not set. API requests will fail.")

@app.route('/generate-quote', methods=['POST'])
def generate_quote():
    """
    Receives prompt data from frontend and generates a smart quote
    using Google's Gemini API. Handles language, length, and error responses.
    """
    data = request.get_json()

    prompt = data.get('prompt', '').strip()
    length = data.get('length', 'medium').lower()
    language = data.get('language', 'english').lower()

    if not prompt:
        return jsonify({"error": "Prompt is required."}), 400

    if not GEMINI_API_KEY:
        return jsonify({"error": "Server API key is not configured."}), 500

    # Map quote length to word ranges
    length_map = {
        "short": "10-20 words",
        "medium": "20-40 words",
        "long": "40-60 words"
    }
    word_count_range = length_map.get(length, "20-40 words")

    # Language-specific instruction
    lang_instruction = {
        "english": "Generate the quote in English.",
        "hindi": "Generate the quote in Hindi using Devanagari script.",
        "kannada": "Generate the quote in Kannada using Kannada script."
    }
    language_instruction = lang_instruction.get(language, lang_instruction["english"])

    # Construct prompt for Gemini
    message_to_gemini = (
        f"{language_instruction} Create an inspirational quote about \"{prompt}\". "
        f"The quote should be approximately {word_count_range} and attributed to a fictional, wise individual. "
        f"Format the output as: \"Quote text\" - Fictional Author Name."
    )

    # Gemini API configuration
    gemini_api_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    payload = {
        "contents": [
            {
                "parts": [
                    {"text": message_to_gemini}
                ]
            }
        ]
    }

    try:
        # Send request to Gemini API
        response = requests.post(gemini_api_url, json=payload, headers=headers)
        response.raise_for_status()
        gemini_result = response.json()

        # Extract generated quote
        if gemini_result and gemini_result.get('candidates'):
            generated_text = gemini_result['candidates'][0]['content']['parts'][0]['text']
            quote_text = generated_text
            author_name = "A Wise Mind"

            # Split quote and author
            if " - " in generated_text:
                parts = generated_text.rsplit(" - ", 1)
                quote_text = parts[0].strip().strip('"')
                author_name = parts[1].strip()

            return jsonify({
                "quote": quote_text,
                "author": author_name
            }), 200

        return jsonify({"error": "No content generated by AI."}), 500

    except requests.exceptions.RequestException as e:
        print(f"Request to Gemini API failed: {e}")
        return jsonify({"error": f"Failed to connect to AI service: {str(e)}"}), 500
    except KeyError as e:
        print(f"Unexpected API response structure: {e}\nResponse: {gemini_result}")
        return jsonify({"error": "Unexpected AI response format."}), 500
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return jsonify({"error": "An internal server error occurred."}), 500

if __name__ == '__main__':
    # For local development only; use Gunicorn or uWSGI in production
    app.run(debug=True, port=5000)
